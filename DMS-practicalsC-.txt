Question 1: SET Class Operations
____________________________
#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
using namespace std;

class SET {
   set<int> elements;
public:
   SET(vector<int> lst) {
     for (int i : lst) elements.insert(i);
   }

  bool isMember(int element) {
    return elements.find(element) != elements.end();
  }

  bool isSubsetOf(SET& other) {
    for (int ele : elements)
       if (other.elements.find(ele) == other.elements.end())
           return false;
    return true;
  }

  set<int> setUnion(SET& other) {
    set<int> result = elements;
    result.insert(other.elements.begin(), other.elements.end());
    return result;
  }

  set<int> setIntersection(SET& other) {
    set<int> result;
    for (int ele : elements)
       if (other.elements.find(ele) != other.elements.end())
           result.insert(ele);
    return result;
  }

  set<int> complement(set<int> universal) {
    set<int> result;
    for (int ele : universal)
       if (elements.find(ele) == elements.end())
           result.insert(ele);
    return result;
  }
     set<int> setDifference(SET& other) {
       set<int> result = elements;
       for (int ele : other.elements)
          result.erase(ele);
       return result;
     }

     set<int> symmetricDifference(SET& other) {
       set<int> u = setUnion(other);
       set<int> i = setIntersection(other);
       for (int ele : i)
          u.erase(ele);
       return u;
     }

     void print() {
       for (int ele : elements)
          cout << ele << " ";
       cout << endl;
     }
};

int main() {
   SET setA({1,2,3,4,7,12});
   SET setB({4,3,2,1,7,11});

     cout << "setA = "; setA.print();
     cout << "setB = "; setB.print();

     cout << "Checking if 11 is member of setA and setB" << endl;
     cout << "setA: " << setA.isMember(11) << endl;
     cout << "setB: " << setB.isMember(11) << endl;

     cout << "Union: ";
     for (int ele : setA.setUnion(setB)) cout << ele << " ";
     cout << endl;

     cout << "Intersection: ";
     for (int ele : setA.setIntersection(setB)) cout << ele << " ";
     cout << endl;

     cout << "Is setA subset of setB? " << setA.isSubsetOf(setB) << endl;

     set<int> universal = {1,2,3,4,7,11,12,13};
     cout << "Complement of setA: ";
     for (int ele : setA.complement(universal)) cout << ele << " ";
     cout << endl;
  cout << "Set Difference (A - B): ";
  for (int ele : setA.setDifference(setB)) cout << ele << " ";
  cout << endl;

  cout << "Symmetric Difference: ";
  for (int ele : setA.symmetricDifference(setB)) cout << ele << " ";
  cout << endl;

  return 0;
}
____________________

Question 2: RELATION Class (Matrix Representation)
____________________

#include <iostream>
#include <vector>
using namespace std;

class RELATION {
   vector<vector<int>> adjMat;
   vector<int> domain;

public:
  RELATION(vector<vector<int>> rel, vector<int> dom) {
     domain = dom;
     adjMat = vector<vector<int>>(dom.size(), vector<int>(dom.size(), 0));
     for (auto& pair : rel) {
        int i = find(dom.begin(), dom.end(), pair[0]) - dom.begin();
        int j = find(dom.begin(), dom.end(), pair[1]) - dom.begin();
        adjMat[i][j] = 1;
     }
  }

  bool isReflexive() {
    for (int i = 0; i < adjMat.size(); ++i)
       if (adjMat[i][i] != 1)
           return false;
    return true;
  }

  bool isSymmetric() {
    for (int i = 0; i < adjMat.size(); ++i)
       for (int j = 0; j < adjMat.size(); ++j)
          if (adjMat[i][j] == 1 && adjMat[j][i] != 1)
              return false;
    return true;
  }
     bool isTransitive() {
       for (int i = 0; i < adjMat.size(); ++i)
          for (int j = 0; j < adjMat.size(); ++j)
             for (int k = 0; k < adjMat.size(); ++k)
                 if (adjMat[i][j] && adjMat[j][k] && !adjMat[i][k])
                     return false;
       return true;
     }

     bool isEquivalence() {
       return isReflexive() && isSymmetric() && isTransitive();
     }
};

int main() {
   vector<vector<int>> relation = {{1,1}, {2,2}, {3,3}, {2,1}, {1,2}, {2,3}};
   vector<int> domain = {1, 2, 3};

     RELATION rel(relation, domain);
     cout << "Reflexive: " << rel.isReflexive() << endl;
     cout << "Symmetric: " << rel.isSymmetric() << endl;
     cout << "Transitive: " << rel.isTransitive() << endl;
     cout << "Equivalence: " << rel.isEquivalence() << endl;

     return 0;
}
____________________

Question 3: Permutations With and Without Repetition
____________________

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void print_vector(const vector<int>& v) {
  for (int x : v) cout << x << " ";
  cout << endl;
}

int main() {
   vector<int> arr = {1, 2, 3, 4};

     // Permutations without repetition
     cout << "Permutations without repetition:" << endl;
     sort(arr.begin(), arr.end());
    do {
       print_vector(arr);
    } while (next_permutation(arr.begin(), arr.end()));

    cout << endl;

  // Permutations with repetition (same as without in this case because all elements are
unique)
  cout << "Permutations with repetition (same as without for unique elements):" << endl;
  sort(arr.begin(), arr.end());
  do {
     print_vector(arr);
  } while (next_permutation(arr.begin(), arr.end()));

    return 0;
}
___________________

Question 4: Brute Force Sum Solutions (x₁ + x₂ + ... + x    = C)
____________________

#include <iostream>
#include <vector>
using namespace std;

void generate_combinations(int n, int C, int current_sum, vector<int> combination) {
  if (current_sum == C && combination.size() == n) {
      for (int num : combination) cout << num << " ";
      cout << endl;
      return;
  } else if (current_sum > C || combination.size() > n) {
      return;
  }

    for (int i = 0; i <= C; ++i) {
       vector<int> next_combination = combination;
       next_combination.push_back(i);
       generate_combinations(n, C, current_sum + i, next_combination);
    }
}

int main() {
   int n = 3, C = 4;
   cout << "Solutions for n = " << n << ", C = " << C << ":\n";
   generate_combinations(n, C, 0, {});
   return 0;
}
___________________
Question 5: Evaluate a Polynomial Function
___________________

#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

int evaluate_polynomial(const vector<int>& coefficients, int x) {
   int result = 0;
   int power = coefficients.size() - 1;
   for (int coeff : coefficients) {
      result += coeff * pow(x, power--);
   }
   return result;
}

int main() {
   vector<int> polynomial = {4, 2, 9}; // Represents 4x^2 + 2x + 9
   int x;
   cout << "Enter value of n: ";
   cin >> x;

  int result = evaluate_polynomial(polynomial, x);
  cout << "The result of evaluating the polynomial at x = " << x << " is: " << result << endl;

  return 0;
}
____________________

Question 6: Check if Graph is Complete (Adjacency Matrix)
____________________

#include <iostream>
#include <vector>
using namespace std;

bool is_complete_graph(const vector<vector<int>>& graph) {
  int n = graph.size();
  for (int i = 0; i < n; ++i)
     for (int j = 0; j < n; ++j)
        if (i != j && graph[i][j] == 0)
            return false;
  return true;
}

int main() {
  vector<vector<int>> graph = {
     {0, 1, 1, 1},
     {1, 0, 1, 1},
     {1, 1, 0, 1},
     {1, 1, 1, 0}
  };

  if (is_complete_graph(graph))
      cout << "The graph is a complete graph." << endl;
  else
      cout << "The graph is not a complete graph." << endl;

  return 0;
}
_______________________

Question 7: Check if Graph is Complete (Adjacency List)
___________________

#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;

bool is_complete_graph(const map<int, vector<int>>& graph) {
  int n = graph.size();
  for (auto& [node, neighbors] : graph) {
     for (int i = 1; i <= n; ++i) {
        if (i != node && find(neighbors.begin(), neighbors.end(), i) == neighbors.end()) {
            return false;
        }
     }
  }
  return true;
}

int main() {
   map<int, vector<int>> graph = {
      {1, {2, 3, 4}},
      {2, {1, 3, 4}},
      {3, {1, 2, 4}},
      {4, {1, 2, 3}} // Modified to be a complete graph
   };

  if (is_complete_graph(graph)) {
      cout << "The graph is a complete graph." << endl;
  } else {
      cout << "The graph is not a complete graph." << endl;
  }

  return 0;
}
___________________

Question 8: In-Degree and Out-Degree of a Directed Graph
__________________

#include <iostream>
#include <map>
#include <vector>
#include <string>
using namespace std;

struct Degree {
   int in_degree = 0;
   int out_degree = 0;
};

int main() {
   map<string, vector<string>> graph = {
      {"A", {"B", "C", "D"}},
      {"B", {"C", "D"}},
      {"C", {"D"}},
      {"D", {}}
   };

  map<string, Degree> degrees;

  // Initialize all vertices
  for (const auto& [vertex, _] : graph) {
      degrees[vertex] = Degree();
  }

  // Calculate in-degree and out-degree
  for (const auto& [vertex, neighbors] : graph) {
     degrees[vertex].out_degree = neighbors.size();
     for (const string& neighbor : neighbors) {
        degrees[neighbor].in_degree++;
     }
  }

  // Display results
  for (const auto& [vertex, degree] : degrees) {
     cout << "Vertex " << vertex << ": In-Degree = " << degree.in_degree
        << ", Out-Degree = " << degree.out_degree << endl;
    }

    return 0;
}
